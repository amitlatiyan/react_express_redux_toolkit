import React, { useState } from "react";
import { useDispatch } from "react-redux";
import { createTutorial } from "../slices/tutorials";

const AddTutorial = () => {
  const initialTutorialState = {
    id: null,
    title: "",
    description: "",
    published: false
  };
  // Learning 8: Initial Setting of state of these 2 variables tutorial, submitted
  const [tutorial, setTutorial] = useState(initialTutorialState);
  const [submitted, setSubmitted] = useState(false);
  
  const dispatch = useDispatch();
  
  // Learning 9: handler for both fields
  // Q: how this name and value coming
  const handleInputChange = event => {
    const { name, value } = event.target;
    setTutorial({ ...tutorial, [name]: value });
  };
  
  const saveTutorial = () => {
    const { title, description } = tutorial;
    
    // Learning 10: ye dispath(hook hai) krne se async thunk reducer m call ho gya
    // with obj title and description
    // We also have a function to get tutorial local state and send the POST request to the Web API. It dispatchs async Thunk createTutorial() with useDispatch(). This hook returns a reference to the dispatch function from the Redux store.
    dispatch(createTutorial({ title, description }))

    // Learning 11: Thunks generated by createAsyncThunk will always return a resolved promise with either the fulfilled action object or rejected action object inside.
    // The promise has an unwrap property which can be called to extract the payload of a fulfilled action or to throw the error.
      .unwrap()
      .then(data => {
        console.log(data);
        setTutorial({
          id: data.id,
          title: data.title,
          description: data.description,
          published: data.published
        });
        setSubmitted(true);
      })
      .catch(e => {
        console.log(e);
      });
  };

  const newTutorial = () => {
    setTutorial(initialTutorialState);
    setSubmitted(false);
  };

  return (
    <div className="submit-form">

      {/* Learning 12: For return, we check the submitted state, if it is true, we show Add button for creating new Tutorial again. Otherwise, a Form with Submit button will display. */}
      {submitted ? (
        <div>
          <h4>You submitted successfully!</h4>
          <button className="btn btn-success" onClick={newTutorial}>
            Add
          </button>
        </div>
      ) : (
        <div>
          <div className="form-group">
            <label htmlFor="title">Title</label>
            <input
              type="text"
              className="form-control"
              id="title"
              required
              value={tutorial.title || ''}
              onChange={handleInputChange}
              name="title"
            />
          </div>

          <div className="form-group">
            <label htmlFor="description">Description</label>
            <input
              type="text"
              className="form-control"
              id="description"
              required
              value={tutorial.description || ''}
              onChange={handleInputChange}
              name="description"
            />
          </div>

          <button onClick={saveTutorial} className="btn btn-success">
            Submit
          </button>
        </div>
      )}
    </div>
  );
};

export default AddTutorial;
